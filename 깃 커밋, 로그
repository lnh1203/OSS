### 깃의 3가지 영역
1. 작업영역
- working directory (= folder)
- working tree
: 탐색기 상의 하위 폴더

2. 스테이징 영역
- staging area
- index area
: 저장소의 .git폴더의 파일

3. 깃 저장소 (git repository)
- 저장소
: 저잣오의 .git폴더의 여러 정보

#### 깃 커밋
- $ git add
: 파일을 작업영역(working tree)에서 스테이징 영역(staging area)로 이동/복사

- $ git commit
: 스테이징 영역(staging area)에 준비된 파일을 깃 저장소(git repository)로 이동/복사
: -m 사용시 커밋 메세지 저장 가능
: -m 사용X시 기본 편집기에서 임의로 커밋 메세지 저장
: --amend 사용시 최근 커밋 메세지 수정 가능
: --amend -m "메세지 내용" 사용시 최근 커밋 메세지를 직접 입력해 수정, 새로운 커밋 ID로 수정
: --amend --no-edit 사용시 파일 수정후 추가, 메세지 수정 없이 최신 커밋으로 수정
: $ git rebase --interactive/-i head~(숫자) 사용시 이전 커밋(~)까지 각각의 커밋을 수정

- $ git status
: 깃 저장소의 현재 상태 확인
:--short/-s를 이용해 간단히 표시 가능
: 붉은색 글씨는 작업 디렉토리를 의미함
: 녹색 글씨는 스테이징 영역을 의미함

- $ echo [삽입할 내용] > <파일명>
: <파일명>에 [삽입할 내용] 삽입, 파일명의 확장자명을 통해 파일 종류(ex .txt 텍스트파일)선택 가능
: > 1개 = 파일 생성 및 내용 삽입, 2개 = 해당 파일에 삽입 (대치 X)

- untracked file
: 깃에 관리되지 않는 파일, 깃에 포함시키기 위해 git add/commit을 해야 함

#### 깃 로그
- $ git log
: 로그 이력 정보 표시
: -- all을 이용해 모든 브랜치의 로그 이력 표시
: --oneline을 이용해 로그 이력을 한 줄로 표시 가능
: --reverse를 이용해 오래된 커밋부터 표시
: --patch/-p를 이용해 로그 이력과 함께 파일의 변화(= 이전 커밋과의 차이)를 표시
: --graph를 이용해 문자 그림으로 로그 이력 표시 가능
: -n을 이용해 최근 nrodml fhrm dlfur vytl


- $ git show
: 마지막 커밋(head)의 커밋 정보 표시
: --oneline을 이용해 커밋 로그 한 줄과 파일의 차이 표시
: -s을 이용하면 파일의 차이는 표시되지 않음 -> --oneline과 함께 사용해 한줄로 표시하되 파일의 차이는 표시X
: [head]를 입력해 지정 head의 커밋 정보 표시
: [commit ID]를 입력해 지정 commit Id의 커밋 정보 표시

#### 커밋 버전 이동
- $ git checkout [이전 커밋]
: 상태가 clean한 상태에서 사용 가능
: 깃의 3가지 영역이 동일한 상태
: head~(^)를 이용해 바로 이전 버전으로 이동
: ~ = tilde, ^ = caret 의 개수/숫자를 이용해 원하는 순서 이전 커밋으로 갈 수 있음


- $ git switch
: git checkout과 유사

- $ git stash
: 임시저장소
: 작업 디렉토리와 스테이징 영역의 원래 내용을 깃 저장소의 마지막 커밋 내용으로 복사
: 가장 최근의 내용이 가장 위에 저장되는 스택형 구조
: 브랜치 이동, 이전 커밋 이동을 위해 사용
: --keep-index/-k을 이용해 스테이징 영역은 저장하지 않고 놔둠 -> checkout 불가능
: --include-untracked/-u을 이용해 untracked file도 포함 저장
: --patch/-p을 이용해 자신이 임시저장할 것과 저장하지 않을 것을 지정할 수 있음
: list를 이용해 임시저장된 목록 확인
: pop를 이용해 임시저장된 내용을 가져와 반영 후 삭제
